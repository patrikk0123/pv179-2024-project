// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.SQLite.Migrations.Migrations
{
    [DbContext(typeof(BookHubDBContext))]
    [Migration("20241115160438_change seeding using bogus")]
    partial class changeseedingusingbogus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("DAL.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 945, DateTimeKind.Local).AddTicks(5110),
                            Name = "Dana",
                            Surname = "Wiegand"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 945, DateTimeKind.Local).AddTicks(5180),
                            Name = "Melyssa",
                            Surname = "Mills"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 945, DateTimeKind.Local).AddTicks(5200),
                            Name = "Davon",
                            Surname = "Kshlerin"
                        });
                });

            modelBuilder.Entity("DAL.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviewImageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 944, DateTimeKind.Local).AddTicks(4410),
                            Description = "卒䆏㡓휼巻ᡵᤘ찴糧蟂톽䣷凿춓䷉냧䝟㰊䓍׈ꯐ鷸疩㫭䪳ｽꇧ翈윟綘俰",
                            ISBN = "ᬭ舟䥖㮕�訮랞죔긋",
                            Name = "묄览愵䬗Ꭵ뀅䚴棎旔柶걢臹ȑ䦻⹆瀘ஜ龡媖乨蔡蟹輮⏏쎻冃㿴潬�붳",
                            Pages = 229,
                            PreviewImageId = "1849645247",
                            Price = 64.037123422362953,
                            PublishDate = new DateOnly(2023, 12, 2),
                            PublisherId = 2,
                            Rating = 2.4109048360168535
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 944, DateTimeKind.Local).AddTicks(4510),
                            Description = "菟趵埧䜏䀺ふ✜䝎㾞̦",
                            ISBN = "蓅﹧㏛졆�ႎ녕䛯ç",
                            Name = "샱ꗑá広曶䕷탗딤鿃轙䊱ۚᦧ绂媔撄",
                            Pages = 468,
                            PreviewImageId = "1849645247",
                            Price = 38.166874590007453,
                            PublishDate = new DateOnly(2023, 12, 4),
                            PublisherId = 1,
                            Rating = 3.9624567662645847
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 944, DateTimeKind.Local).AddTicks(4530),
                            Description = "쇽䗿阭㉌柮ધ��ᡕïಟ",
                            ISBN = "锓㐙㨇摼俅㸋닽啛",
                            Name = "੃钦⺸खࡳ鄘ṋ櫍⚼뮻笮鶃䥐礛�",
                            Pages = 313,
                            PreviewImageId = "1849645247",
                            Price = 27.241800476822036,
                            PublishDate = new DateOnly(2024, 9, 26),
                            PublisherId = 1,
                            Rating = 2.4625310904366549
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 944, DateTimeKind.Local).AddTicks(4560),
                            Description = "辎�﫦ᴇ퀞秞⹩㻏⒊ढ懤ў쿤酸ヸኰ�﫷苔咎蚎롄嶶춹ꠗ䠮篣谗⎼㽢椳᠖맰嘟젭㚌쒴헀킅佑횁ᒓ憚묈븹低ߜ垓喖ㄘ삐힉錻鱕ꮇㄻ呃鞤ⴴ帮",
                            ISBN = "뇁�榙↛睬僐ݽੰ䯤",
                            Name = "洷즘飮揔굅둓荂⇦�♨嫱ූ暀ޔ֑㉃禿퉈徴㷂",
                            Pages = 138,
                            PreviewImageId = "1849645247",
                            Price = 38.729846111609511,
                            PublishDate = new DateOnly(2024, 9, 27),
                            PublisherId = 1,
                            Rating = 3.8773468299359175
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 944, DateTimeKind.Local).AddTicks(4590),
                            Description = "圷늷	釆酪ꇨ䘤턾ₐ㊅䕻摥탅ᣜ扵䡕ᄭ閲ㅉ㺾욡졡ຩꍧ艡Ⰺﱕ퍨ҫ튼ᜩĎ섿؎괅䠧龆䆢㊯棵潵蹡抵ᙰꅴ毳ᾖ䭶꙳ﾑ憒㊹⌬侊闂埗䔗說놑",
                            ISBN = "詌ﰟ탫郍◝䱙땸㢦",
                            Name = "룯ଭ홳ﱜ휢ቄ렗ݑ蘗殒猪츓᧷ਘ覬䳍㏖㧌汰嫷단儞택訰ﵻ攑�苣ꩊ뎿㫞꞉",
                            Pages = 93,
                            PreviewImageId = "1849645247",
                            Price = 97.299318992521449,
                            PublishDate = new DateOnly(2024, 1, 12),
                            PublisherId = 1,
                            Rating = 1.1782937004726741
                        });
                });

            modelBuilder.Entity("DAL.Models.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 946, DateTimeKind.Local).AddTicks(5340)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 3,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 946, DateTimeKind.Local).AddTicks(5380)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 946, DateTimeKind.Local).AddTicks(5390)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 946, DateTimeKind.Local).AddTicks(5400)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 946, DateTimeKind.Local).AddTicks(5400)
                        });
                });

            modelBuilder.Entity("DAL.Models.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 949, DateTimeKind.Local).AddTicks(8770),
                            GenreId = 3
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 949, DateTimeKind.Local).AddTicks(8820),
                            GenreId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 949, DateTimeKind.Local).AddTicks(8830),
                            GenreId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 949, DateTimeKind.Local).AddTicks(8830),
                            GenreId = 1
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 949, DateTimeKind.Local).AddTicks(8840),
                            GenreId = 1
                        });
                });

            modelBuilder.Entity("DAL.Models.BookImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 950, DateTimeKind.Local).AddTicks(9580),
                            ImageId = "1849645247"
                        });
                });

            modelBuilder.Entity("DAL.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenreType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 948, DateTimeKind.Local).AddTicks(8250),
                            GenreType = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 948, DateTimeKind.Local).AddTicks(8310),
                            GenreType = "Romance"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 948, DateTimeKind.Local).AddTicks(8320),
                            GenreType = "Romance"
                        });
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 955, DateTimeKind.Local).AddTicks(1550),
                            TotalPrice = 580.03164892012308,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 955, DateTimeKind.Local).AddTicks(1630),
                            TotalPrice = 136.02916510413095,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DAL.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PricePerItem")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 953, DateTimeKind.Local).AddTicks(20),
                            OrderId = 1,
                            PricePerItem = 38.166874590007453,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 2,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 953, DateTimeKind.Local).AddTicks(60),
                            OrderId = 1,
                            PricePerItem = 97.299318992521449,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 3,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 954, DateTimeKind.Local).AddTicks(480),
                            OrderId = 2,
                            PricePerItem = 38.729846111609511,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 954, DateTimeKind.Local).AddTicks(530),
                            OrderId = 2,
                            PricePerItem = 97.299318992521449,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("DAL.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 943, DateTimeKind.Local).AddTicks(1810),
                            Name = "Brekke, Schamberger and Harber"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 943, DateTimeKind.Local).AddTicks(2090),
                            Name = "McClure, Ledner and Olson"
                        });
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "ྒྷ㶏朖꺎멀ὅ悑뒓ℍ놦휿㯎럡투腸㆔䏻泖塑謎䄂",
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 950, DateTimeKind.Local).AddTicks(9450),
                            Rating = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Body = "밆얕솚ᅇ铷䅰᱄⿨岪ꃨ袏镚輻ﻀ�졮儻슭",
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 950, DateTimeKind.Local).AddTicks(9520),
                            Rating = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Body = "ㆡɌ蒿愤쥢밉➿궲ꌚ戂裹蚎툷쁇螂�펼ஂ搩ធ轛쩸掸ꃲ砡�灾礢祯滥涙渍㤞ᰁ贗뱪峍ᔨຠꤦ嘇ꛭ敃㱴ᎂ兊₲Д澹䵸յஉ뜴貢",
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 950, DateTimeKind.Local).AddTicks(9540),
                            Rating = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Body = "椂캪륝ㆯዡ燚ݨ꧘㔞渵掘竟㿮ﶇ流谽痷丁☝೵굓ᗬ湶凃悄⧠ຑ굠覚螻Ᲊ갂켩撄�",
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 950, DateTimeKind.Local).AddTicks(9560),
                            Rating = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Body = "఑鲤ꊗ成뗬皎掅衶髗㧖በꔉ饩䶮౟꘵뗺繮�⬻痐쳧㣎綡䮴꧎ᾧ됓治份䐴㪎䪸墱㊑鿁⪾꒹䆞鶵킖췌襖迄鞈⋍逋데冩헓灁Ỳ﷝ﮣ桧ꖀ",
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 950, DateTimeKind.Local).AddTicks(9570),
                            Rating = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 947, DateTimeKind.Local).AddTicks(7120),
                            Email = "Ramiro_Collins@gmail.com",
                            Password = "heslo123",
                            Role = 0,
                            Username = "Jailyn46"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 947, DateTimeKind.Local).AddTicks(7330),
                            Email = "Madelynn_Wolf9@yahoo.com",
                            Password = "heslo123",
                            Role = 0,
                            Username = "Santiago43"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 947, DateTimeKind.Local).AddTicks(7480),
                            Email = "Cornelius_Nitzsche@yahoo.com",
                            Password = "heslo123",
                            Role = 0,
                            Username = "Rita83"
                        });
                });

            modelBuilder.Entity("DAL.Models.WishListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("WishListItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 951, DateTimeKind.Local).AddTicks(9760),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 951, DateTimeKind.Local).AddTicks(9810),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 4, 37, 951, DateTimeKind.Local).AddTicks(9820),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.Book", b =>
                {
                    b.HasOne("DAL.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DAL.Models.BookAuthor", b =>
                {
                    b.HasOne("DAL.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DAL.Models.BookGenre", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DAL.Models.BookImage", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany("Images")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.OrderItem", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.WishListItem", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("WishListItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("DAL.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAL.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DAL.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("WishListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
