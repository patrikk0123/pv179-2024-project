// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.SQLite.Migrations.Migrations
{
    [DbContext(typeof(BookHubDBContext))]
    [Migration("20241115163449_change seeding using bogus v2")]
    partial class changeseedingusingbogusv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("DAL.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 552, DateTimeKind.Local).AddTicks(6560),
                            Name = "Sonia",
                            Surname = "Volkman"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 552, DateTimeKind.Local).AddTicks(6650),
                            Name = "Israel",
                            Surname = "Jaskolski"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 552, DateTimeKind.Local).AddTicks(6670),
                            Name = "Rasheed",
                            Surname = "Little"
                        });
                });

            modelBuilder.Entity("DAL.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviewImageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 551, DateTimeKind.Local).AddTicks(980),
                            Description = "Sint quae ratione fugiat hic doloribus.\nCum voluptate quidem repellat.\nEarum a dolores corrupti quam nisi.\nAccusantium nobis porro eum.",
                            ISBN = "0rolc6ndjd",
                            Name = "wireless",
                            Pages = 166,
                            PreviewImageId = "1849645247",
                            Price = 9.8192532026417858,
                            PublishDate = new DateOnly(2024, 10, 2),
                            PublisherId = 1,
                            Rating = 2.86921968637072
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 551, DateTimeKind.Local).AddTicks(1240),
                            Description = "Possimus necessitatibus dolor sequi.\nQuidem quod rerum aliquam qui et possimus vitae expedita.\nQuas odio eum voluptates necessitatibus nihil dolores.\nDolore nulla est explicabo atque excepturi.",
                            ISBN = "sqhqqfu5la",
                            Name = "Metal",
                            Pages = 286,
                            PreviewImageId = "1849645247",
                            Price = 56.389817976947292,
                            PublishDate = new DateOnly(2024, 3, 24),
                            PublisherId = 1,
                            Rating = 2.520821135358025
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 551, DateTimeKind.Local).AddTicks(3600),
                            Description = "Nisi sequi doloribus nihil.\nHarum itaque numquam qui.\nSed molestiae fugit assumenda explicabo sunt aliquam aut.\nError sequi ullam.",
                            ISBN = "aw9919xk55",
                            Name = "Music & Books",
                            Pages = 441,
                            PreviewImageId = "1849645247",
                            Price = 49.756056920747163,
                            PublishDate = new DateOnly(2024, 5, 28),
                            PublisherId = 2,
                            Rating = 1.9788754638987403
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 551, DateTimeKind.Local).AddTicks(4080),
                            Description = "Omnis ab consequatur alias quaerat sed dolorum aspernatur nam et.\nPerspiciatis dolorem ut ullam minus nobis rerum voluptatem qui.\nOfficia eum temporibus ea delectus odit quo.\nEt non et.",
                            ISBN = "kvhax7z4po",
                            Name = "Austria",
                            Pages = 153,
                            PreviewImageId = "1849645247",
                            Price = 56.504760007589987,
                            PublishDate = new DateOnly(2023, 11, 15),
                            PublisherId = 2,
                            Rating = 3.9769670995536153
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 551, DateTimeKind.Local).AddTicks(4610),
                            Description = "Hic ut ut et doloremque.\nPerspiciatis voluptatum quas fuga recusandae ab et repudiandae.\nQuia id rerum.\nNon ipsum aut qui minima.",
                            ISBN = "cvqu84i3nn",
                            Name = "copy",
                            Pages = 476,
                            PreviewImageId = "1849645247",
                            Price = 92.827373741534487,
                            PublishDate = new DateOnly(2024, 1, 22),
                            PublisherId = 1,
                            Rating = 1.2300774738946658
                        });
                });

            modelBuilder.Entity("DAL.Models.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 553, DateTimeKind.Local).AddTicks(8440)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 553, DateTimeKind.Local).AddTicks(8510)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 553, DateTimeKind.Local).AddTicks(8520)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 553, DateTimeKind.Local).AddTicks(8530)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 553, DateTimeKind.Local).AddTicks(8540)
                        });
                });

            modelBuilder.Entity("DAL.Models.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 557, DateTimeKind.Local).AddTicks(4870),
                            GenreId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 557, DateTimeKind.Local).AddTicks(4940),
                            GenreId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 557, DateTimeKind.Local).AddTicks(4950),
                            GenreId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 557, DateTimeKind.Local).AddTicks(4950),
                            GenreId = 3
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 557, DateTimeKind.Local).AddTicks(4960),
                            GenreId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.BookImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 558, DateTimeKind.Local).AddTicks(7850),
                            ImageId = "1849645247"
                        });
                });

            modelBuilder.Entity("DAL.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenreType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 556, DateTimeKind.Local).AddTicks(3480),
                            GenreType = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 556, DateTimeKind.Local).AddTicks(3540),
                            GenreType = "Horror"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 556, DateTimeKind.Local).AddTicks(3550),
                            GenreType = "Horror"
                        });
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 563, DateTimeKind.Local).AddTicks(5850),
                            TotalPrice = 226.01904003035995,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 563, DateTimeKind.Local).AddTicks(5930),
                            TotalPrice = 238.30124049355578,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("DAL.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PricePerItem")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 561, DateTimeKind.Local).AddTicks(3430),
                            OrderId = 1,
                            PricePerItem = 56.504760007589987,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 561, DateTimeKind.Local).AddTicks(3480),
                            OrderId = 1,
                            PricePerItem = 56.504760007589987,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 562, DateTimeKind.Local).AddTicks(4320),
                            OrderId = 2,
                            PricePerItem = 49.756056920747163,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 4,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 562, DateTimeKind.Local).AddTicks(4370),
                            OrderId = 2,
                            PricePerItem = 9.8192532026417858,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("DAL.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 549, DateTimeKind.Local).AddTicks(5210),
                            Name = "Christiansen - Carter"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 549, DateTimeKind.Local).AddTicks(5420),
                            Name = "Kris - Ortiz"
                        });
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "fkmkqcowugmlb",
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 558, DateTimeKind.Local).AddTicks(7690),
                            Rating = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Body = "irpsagkzblu",
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 558, DateTimeKind.Local).AddTicks(7780),
                            Rating = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Body = "urvgmkzrhivlthzfuydapehoxikznintgqfijojgqsippfkwffx",
                            BookId = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 558, DateTimeKind.Local).AddTicks(7800),
                            Rating = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Body = "znyyusekxterhtlibfifmdedqlyhkwjbwnibjdgxqrzaggrf",
                            BookId = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 558, DateTimeKind.Local).AddTicks(7820),
                            Rating = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Body = "enctvnqthpbrisdvxbzosrjsqcxbdpmgouctrwkkmhahoyzqumgfchnksycfleijubbqxajrr",
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 558, DateTimeKind.Local).AddTicks(7840),
                            Rating = 5,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 555, DateTimeKind.Local).AddTicks(1300),
                            Email = "Adalberto_Kling45@hotmail.com",
                            Password = "heslo123",
                            Role = 0,
                            Username = "Giovanni.Renner"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 555, DateTimeKind.Local).AddTicks(1460),
                            Email = "Ned.Gorczany@gmail.com",
                            Password = "heslo123",
                            Role = 1,
                            Username = "Samir52"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 555, DateTimeKind.Local).AddTicks(1570),
                            Email = "Felton_Hilpert@hotmail.com",
                            Password = "heslo123",
                            Role = 0,
                            Username = "Anne_Shanahan"
                        });
                });

            modelBuilder.Entity("DAL.Models.WishListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("WishListItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 560, DateTimeKind.Local).AddTicks(1080),
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 560, DateTimeKind.Local).AddTicks(1160),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 17, 34, 49, 560, DateTimeKind.Local).AddTicks(1170),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DAL.Models.Book", b =>
                {
                    b.HasOne("DAL.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DAL.Models.BookAuthor", b =>
                {
                    b.HasOne("DAL.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DAL.Models.BookGenre", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DAL.Models.BookImage", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany("Images")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.OrderItem", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DAL.Models.Review", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.WishListItem", b =>
                {
                    b.HasOne("DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("WishListItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("DAL.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAL.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("DAL.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DAL.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("WishListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
